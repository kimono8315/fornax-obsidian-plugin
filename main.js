/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FornaxPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/constants.ts
var DEFAULT_SETTINGS = {
  // No settings currently needed
};
var VIEW_TYPE_FORNAX = "fornax-telescope";

// src/engine/fornax-engine.ts
var import_obsidian = require("obsidian");
var FornaxEngine = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
  }
  async toggleTelescopeMode(file) {
    new import_obsidian.Notice("Fornax telescope mode activated!");
  }
  async parseDocument(content) {
    const rawParagraphs = content.split("\n\n").filter((p) => p.trim());
    const sentences = rawParagraphs.map((para) => {
      const lines = para.split("\n");
      return lines.filter((line) => {
        const trimmed = line.trim();
        return trimmed && !(trimmed.startsWith("%%") && trimmed.endsWith("%%"));
      });
    });
    const paragraphs = sentences.map((sentenceArray) => sentenceArray.join("\n"));
    const edits = await this.parseExistingEdits(content);
    const sections = this.parseSectionStructure(rawParagraphs);
    return { paragraphs, sentences, edits, rawParagraphs, sections };
  }
  parseSectionStructure(rawParagraphs) {
    const sections = [];
    let currentSection = null;
    rawParagraphs.forEach((paragraph, index) => {
      const trimmed = paragraph.trim();
      if (trimmed.startsWith("##") && !trimmed.startsWith("###")) {
        if (currentSection) {
          currentSection.endParagraphIndex = index - 1;
          sections.push(currentSection);
        }
        currentSection = {
          heading: trimmed.replace(/^##\s*/, ""),
          level: 2,
          paragraphs: [],
          startParagraphIndex: index,
          endParagraphIndex: index
        };
      } else if (trimmed.startsWith("###")) {
        if (currentSection) {
          currentSection.paragraphs.push(paragraph);
        }
      } else if (currentSection) {
        currentSection.paragraphs.push(paragraph);
      }
    });
    if (currentSection) {
      currentSection.endParagraphIndex = rawParagraphs.length - 1;
      sections.push(currentSection);
    }
    return sections;
  }
  async parseExistingEdits(content) {
    const commentRegex = /<!--\s*FORNAX_EDIT:(.+?)\s*-->/g;
    const edits = [];
    let match;
    while ((match = commentRegex.exec(content)) !== null) {
      try {
        const editData = JSON.parse(match[1]);
        edits.push(editData);
      } catch (e) {
        console.warn("Failed to parse Fornax edit:", match[1]);
      }
    }
    return edits;
  }
  async saveEdit(file, edit) {
    const content = await this.app.vault.read(file);
    const comment = `<!-- FORNAX_EDIT:${JSON.stringify(edit)} -->`;
  }
};

// src/ui/fornax-view.ts
var import_obsidian3 = require("obsidian");

// src/ui/telescope-overlay.ts
var import_obsidian2 = require("obsidian");
var TelescopeOverlay = class {
  // For auto-scrolling to specific elements
  constructor(container, plugin) {
    this.currentZoom = "document";
    this.currentDocument = null;
    // FornaxPlugin when extracted
    this.isInternalUpdate = false;
    this.targetScrollElement = null;
    this.container = container;
    this.plugin = plugin;
    this.createInterface();
  }
  createInterface() {
    this.addStyles();
    this.container.addClass("fornax-telescope");
    this.controlsEl = this.container.createEl("div", { cls: "fornax-zoom-controls" });
    this.createZoomControls();
    this.contentEl = this.container.createEl("div", { cls: "fornax-content" });
    this.contentEl.createEl("div", {
      cls: "fornax-placeholder",
      text: "Open a markdown document to begin telescopic editing"
    });
  }
  createZoomControls() {
    const zoomLevels = [
      { level: "document", label: "Document", icon: "\u{1F4C4}" },
      { level: "paragraphs", label: "Paragraphs", icon: "\u{1F4DD}" },
      { level: "sentences", label: "Sentences", icon: "\u270F\uFE0F" }
    ];
    zoomLevels.forEach(({ level, label, icon }) => {
      const btn = this.controlsEl.createEl("button", {
        cls: `fornax-zoom-btn ${level === this.currentZoom ? "active" : ""}`,
        text: `${icon} ${label}`
      });
      btn.onclick = () => this.setZoomLevel(level);
    });
  }
  async loadDocument(file) {
    if (this.isInternalUpdate) {
      this.isInternalUpdate = false;
      return;
    }
    const content = await this.plugin.app.vault.read(file);
    this.currentDocument = await this.plugin.engine.parseDocument(content);
    this.renderCurrentZoom();
  }
  setZoomLevel(level, targetElement) {
    var _a;
    this.currentZoom = level;
    this.targetScrollElement = targetElement || null;
    this.controlsEl.querySelectorAll(".fornax-zoom-btn").forEach((btn) => {
      btn.removeClass("active");
    });
    (_a = this.controlsEl.querySelector(`button:nth-child(${level === "document" ? 1 : level === "paragraphs" ? 2 : 3})`)) == null ? void 0 : _a.addClass("active");
    this.renderCurrentZoom();
  }
  scrollToTarget() {
    if (!this.targetScrollElement)
      return;
    setTimeout(() => {
      const targetEl = this.contentEl.querySelector(this.targetScrollElement);
      if (targetEl) {
        targetEl.scrollIntoView({
          behavior: "smooth",
          block: "start"
        });
      }
      this.targetScrollElement = null;
    }, 100);
  }
  renderCurrentZoom() {
    if (!this.currentDocument)
      return;
    this.contentEl.empty();
    switch (this.currentZoom) {
      case "document":
        this.renderDocumentView();
        break;
      case "paragraphs":
        this.renderParagraphView();
        break;
      case "sentences":
        this.renderSentenceView();
        break;
    }
    this.scrollToTarget();
  }
  renderDocumentView() {
    const docView = this.contentEl.createEl("div", { cls: "fornax-document-view" });
    const overview = docView.createEl("div", { cls: "fornax-overview" });
    const documentTitle = this.getDocumentTitle();
    overview.createEl("h3", {
      text: documentTitle,
      cls: "fornax-document-title"
    });
    const stats = overview.createEl("div", { cls: "fornax-stats" });
    const nonHeadingParagraphs = this.currentDocument.paragraphs.filter((para) => {
      return !para.trim().startsWith("#");
    });
    stats.createEl("span", {
      cls: "stat",
      text: `${nonHeadingParagraphs.length} paragraphs`
    });
    const totalSentences = this.currentDocument.sentences.reduce((sum, para) => {
      const nonHeadingSentences = para.filter((sentence) => !sentence.trim().startsWith("#"));
      return sum + nonHeadingSentences.length;
    }, 0);
    stats.createEl("span", {
      cls: "stat",
      text: `${totalSentences} sentences`
    });
    if (this.currentDocument.sections && this.currentDocument.sections.length > 0) {
      const sectionsContainer = docView.createEl("div", { cls: "fornax-sections-container" });
      this.renderSectionBlocks(sectionsContainer);
    } else {
      const miniPreviews = docView.createEl("div", { cls: "fornax-mini-paragraphs" });
      this.currentDocument.paragraphs.forEach((para, i) => {
        const miniPara = miniPreviews.createEl("div", {
          cls: "fornax-mini-paragraph",
          text: para.slice(0, 100) + (para.length > 100 ? "..." : "")
        });
        miniPara.onclick = () => {
          this.setZoomLevel("paragraphs", `[data-para-index="${i}"]`);
        };
      });
    }
  }
  renderSectionBlocks(container) {
    if (!this.currentDocument.sections)
      return;
    this.currentDocument.sections.forEach((section, sectionIndex) => {
      const sectionBlock = container.createEl("div", {
        cls: "fornax-section-block",
        attr: { "data-section-index": sectionIndex.toString() }
      });
      const sectionHeader = sectionBlock.createEl("div", { cls: "fornax-section-header" });
      sectionHeader.createEl("h3", {
        cls: "fornax-section-title",
        text: section.heading
      });
      const sectionContent = sectionBlock.createEl("div", { cls: "fornax-section-content" });
      section.paragraphs.forEach((paragraph, paragraphIndex) => {
        const cleanParagraph = this.cleanParagraphForPreview(paragraph);
        if (paragraph.trim().startsWith("###")) {
          const subheading = sectionContent.createEl("div", {
            cls: "fornax-third-level-heading",
            text: paragraph.trim().replace(/^###\s*/, "")
          });
        } else if (cleanParagraph.trim()) {
          const sentences = cleanParagraph.split("\n").filter((s) => s.trim());
          if (sentences.length > 0) {
            const paragraphPreview = sectionContent.createEl("div", {
              cls: "fornax-paragraph-preview",
              text: sentences[0].slice(0, 80) + (sentences[0].length > 80 ? "..." : "")
            });
          }
        }
      });
      sectionBlock.onclick = () => {
        const sectionStartIndex = section.startParagraphIndex;
        this.setZoomLevel("paragraphs", `[data-para-index="${sectionStartIndex}"]`);
      };
    });
  }
  cleanParagraphForPreview(paragraph) {
    const lines = paragraph.split("\n");
    return lines.filter((line) => {
      const trimmed = line.trim();
      return trimmed && !(trimmed.startsWith("%%") && trimmed.endsWith("%%"));
    }).join("\n");
  }
  renderParagraphView() {
    const paraView = this.contentEl.createEl("div", { cls: "fornax-paragraph-view" });
    console.log("Rendering paragraph view with", this.currentDocument.paragraphs.length, "paragraphs");
    for (let i = 0; i < this.currentDocument.paragraphs.length; i++) {
      const para = this.currentDocument.paragraphs[i];
      console.log("Creating paragraph", i);
      const isHeading = para.trim().startsWith("#");
      if (isHeading) {
        const headingBlock = paraView.createEl("div", {
          cls: "fornax-heading-block",
          attr: { "data-para-index": i.toString() }
        });
        headingBlock.createEl("div", {
          cls: "fornax-heading-content",
          text: para.trim()
        });
      } else {
        const hasComments = this.paragraphHasComments(i);
        const isComplete = this.paragraphIsComplete(i);
        let cssClasses = "fornax-paragraph-block";
        if (hasComments) {
          cssClasses += " fornax-has-alternatives";
        } else if (isComplete) {
          cssClasses += " fornax-paragraph-complete";
        }
        const paraBlock = paraView.createEl("div", {
          cls: cssClasses,
          attr: { "data-para-index": i.toString() }
        });
        const dragHandle = paraBlock.createEl("div", {
          cls: "fornax-drag-handle",
          text: "::"
        });
        console.log("Created drag handle:", dragHandle);
        const content = paraBlock.createEl("div", {
          cls: "fornax-paragraph-content",
          text: para
        });
        paraBlock.createEl("div", {
          cls: "fornax-sentence-count",
          text: `${this.currentDocument.sentences[i].length} sentences`
        });
        const completionBtn = paraBlock.createEl("button", {
          cls: "fornax-completion-btn",
          text: isComplete ? "\u2705" : "\u2610"
        });
        completionBtn.title = isComplete ? "Mark as incomplete" : "Mark as complete";
        completionBtn.onclick = (e) => {
          e.stopPropagation();
          this.toggleParagraphCompletion(i);
        };
        content.onclick = () => {
          const paragraphNumber = this.getParagraphDisplayNumber(i);
          if (paragraphNumber > 0) {
            this.setZoomLevel("sentences", `[data-paragraph-number="${paragraphNumber}"]`);
          } else {
            this.setZoomLevel("sentences");
          }
        };
        console.log("About to call makeDraggable for paragraph", i);
        this.makeDraggable(paraBlock, "paragraph");
      }
    }
  }
  getDocumentTitle() {
    for (const paragraph of this.currentDocument.paragraphs) {
      const trimmed = paragraph.trim();
      if (trimmed.startsWith("# ") && !trimmed.startsWith("##")) {
        return trimmed.slice(2).trim() || "Document";
      }
    }
    for (const sentenceArray of this.currentDocument.sentences) {
      for (const sentence of sentenceArray) {
        const trimmed = sentence.trim();
        if (trimmed.startsWith("# ") && !trimmed.startsWith("##")) {
          return trimmed.slice(2).trim() || "Document";
        }
      }
    }
    return "Document Structure";
  }
  getParagraphDisplayNumber(paragraphIndex) {
    const targetParagraph = this.currentDocument.paragraphs[paragraphIndex];
    if (targetParagraph.trim().startsWith("#")) {
      return 0;
    }
    let displayNumber = 0;
    for (let i = 0; i <= paragraphIndex; i++) {
      const paragraph = this.currentDocument.paragraphs[i];
      if (!paragraph.trim().startsWith("#")) {
        displayNumber++;
      }
    }
    return displayNumber;
  }
  renderSentenceView() {
    const sentView = this.contentEl.createEl("div", { cls: "fornax-sentence-view" });
    let paragraphCounter = 1;
    this.currentDocument.sentences.forEach((sentences, paraIndex) => {
      const hasNonHeadingContent = sentences.some((sentence) => !sentence.trim().startsWith("#"));
      if (hasNonHeadingContent) {
        const paraHeader = sentView.createEl("div", {
          cls: "fornax-paragraph-header",
          text: `Paragraph ${paragraphCounter}`,
          attr: { "data-paragraph-number": paragraphCounter.toString() }
        });
        paragraphCounter++;
      }
      const sentenceContainer = sentView.createEl("div", { cls: "fornax-sentence-container" });
      sentences.forEach((sentence, sentIndex) => {
        const isHeading = sentence.trim().startsWith("#");
        if (isHeading) {
          const headingBlock = sentenceContainer.createEl("div", {
            cls: "fornax-heading-block",
            attr: {
              "data-para-index": paraIndex.toString(),
              "data-sent-index": sentIndex.toString()
            }
          });
          headingBlock.createEl("div", {
            cls: "fornax-heading-content",
            text: sentence.trim()
          });
        } else {
          const hasAlternatives = this.sentenceHasAlternatives(paraIndex, sentIndex);
          const alternativesData = this.getSentenceAlternatives(paraIndex, sentIndex);
          const sentBlock = sentenceContainer.createEl("div", {
            cls: `fornax-sentence-block ${hasAlternatives ? "fornax-has-alternatives" : ""}`,
            attr: {
              "data-para-index": paraIndex.toString(),
              "data-sent-index": sentIndex.toString()
            }
          });
          sentBlock.createEl("div", { cls: "fornax-drag-handle", text: "::" });
          const sentenceRow = sentBlock.createEl("div", { cls: "fornax-sentence-row" });
          const content = sentenceRow.createEl("div", {
            cls: "fornax-sentence-content",
            text: sentence
          });
          const addBtn = sentenceRow.createEl("button", {
            cls: "fornax-add-alternative-btn",
            text: "+"
          });
          addBtn.onclick = () => this.showAddAlternativeInput(sentBlock, paraIndex, sentIndex);
          if (hasAlternatives) {
            const saveBtn = sentenceRow.createEl("button", {
              cls: "fornax-save-final-btn",
              text: "\u2713"
            });
            saveBtn.onclick = () => this.commitSentenceChoice(paraIndex, sentIndex);
          }
          if (hasAlternatives) {
            this.showSentenceAlternatives(sentBlock, paraIndex, sentIndex);
          }
          this.makeDraggable(sentBlock, "sentence");
        }
      });
    });
  }
  makeDraggable(element, type) {
    let isDragging = false;
    let startY = 0;
    let startTop = 0;
    let draggedElement = null;
    const handle = element.querySelector(".fornax-drag-handle");
    const handleMouseDown = (e) => {
      isDragging = true;
      draggedElement = element;
      startY = e.clientY;
      startTop = element.offsetTop;
      element.addClass("dragging");
      document.body.style.cursor = "grabbing";
      e.preventDefault();
    };
    const handleMouseMove = (e) => {
      if (!isDragging || !draggedElement)
        return;
      const deltaY = e.clientY - startY;
      draggedElement.style.transform = `translateY(${deltaY}px)`;
      this.updateDropTargets(e, draggedElement, type);
    };
    const handleMouseUp = async (e) => {
      if (!isDragging || !draggedElement)
        return;
      const dropInfo = this.findDropTarget(e, draggedElement, type);
      isDragging = false;
      draggedElement.removeClass("dragging");
      draggedElement.style.transform = "";
      document.body.style.cursor = "";
      this.clearDropTargets(type);
      if (dropInfo && dropInfo.target !== draggedElement) {
        await this.insertElement(draggedElement, dropInfo.target, dropInfo.position, type, dropInfo.isHeading);
      }
      draggedElement = null;
    };
    handle.addEventListener("mousedown", handleMouseDown);
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp);
  }
  updateDropTargets(e, draggedElement, type) {
    this.clearDropTargets(type);
    const contentTargets = this.contentEl.querySelectorAll(
      type === "paragraph" ? ".fornax-paragraph-block" : ".fornax-sentence-block"
    );
    const headingTargets = this.contentEl.querySelectorAll(".fornax-heading-block");
    const allTargets = [...Array.from(contentTargets), ...Array.from(headingTargets)];
    allTargets.forEach((target) => {
      if (target === draggedElement)
        return;
      const rect = target.getBoundingClientRect();
      const mouseY = e.clientY;
      if (mouseY >= rect.top && mouseY <= rect.bottom) {
        const middleY = rect.top + rect.height / 2;
        const position = mouseY < middleY ? "before" : "after";
        target.addClass("fornax-drop-target");
        target.addClass(`fornax-drop-${position}`);
      }
    });
  }
  findDropTarget(e, draggedElement, type) {
    const contentTargets = this.contentEl.querySelectorAll(
      type === "paragraph" ? ".fornax-paragraph-block" : ".fornax-sentence-block"
    );
    const headingTargets = this.contentEl.querySelectorAll(".fornax-heading-block");
    const allTargets = [...Array.from(contentTargets), ...Array.from(headingTargets)];
    for (let i = 0; i < allTargets.length; i++) {
      const target = allTargets[i];
      if (target === draggedElement)
        continue;
      const rect = target.getBoundingClientRect();
      const mouseY = e.clientY;
      if (mouseY >= rect.top && mouseY <= rect.bottom) {
        const middleY = rect.top + rect.height / 2;
        const position = mouseY < middleY ? "before" : "after";
        const isHeading = target.classList.contains("fornax-heading-block");
        return { target, position, isHeading };
      }
    }
    return null;
  }
  clearDropTargets(type) {
    const contentTargets = this.contentEl.querySelectorAll(
      type === "paragraph" ? ".fornax-paragraph-block" : ".fornax-sentence-block"
    );
    const headingTargets = this.contentEl.querySelectorAll(".fornax-heading-block");
    const allTargets = [...Array.from(contentTargets), ...Array.from(headingTargets)];
    allTargets.forEach((target) => {
      target.removeClass("fornax-drop-target");
      target.removeClass("fornax-drop-before");
      target.removeClass("fornax-drop-after");
    });
  }
  async insertElement(draggedElement, dropTarget, position, type, isHeadingTarget = false) {
    if (type === "paragraph") {
      const draggedIndex = parseInt(draggedElement.getAttribute("data-para-index") || "0");
      let dropIndex = parseInt(dropTarget.getAttribute("data-para-index") || "0");
      const draggedParagraph = this.currentDocument.paragraphs.splice(draggedIndex, 1)[0];
      const draggedSentences = this.currentDocument.sentences.splice(draggedIndex, 1)[0];
      let draggedRawParagraph;
      if (this.currentDocument.rawParagraphs) {
        draggedRawParagraph = this.currentDocument.rawParagraphs.splice(draggedIndex, 1)[0];
      }
      let insertIndex = dropIndex;
      if (isHeadingTarget) {
        if (position === "before") {
          insertIndex = dropIndex;
        } else {
          insertIndex = dropIndex + 1;
        }
      } else {
        if (draggedIndex < dropIndex) {
          insertIndex = dropIndex - 1;
        }
        if (position === "after") {
          insertIndex += 1;
        }
      }
      if (!isHeadingTarget && draggedIndex < dropIndex) {
        insertIndex = Math.max(0, insertIndex);
      }
      this.currentDocument.paragraphs.splice(insertIndex, 0, draggedParagraph);
      this.currentDocument.sentences.splice(insertIndex, 0, draggedSentences);
      if (this.currentDocument.rawParagraphs && draggedRawParagraph) {
        this.currentDocument.rawParagraphs.splice(insertIndex, 0, draggedRawParagraph);
      }
    } else {
      const draggedParaIndex = parseInt(draggedElement.getAttribute("data-para-index") || "0");
      const draggedSentIndex = parseInt(draggedElement.getAttribute("data-sent-index") || "0");
      let dropParaIndex = parseInt(dropTarget.getAttribute("data-para-index") || "0");
      let dropSentIndex = parseInt(dropTarget.getAttribute("data-sent-index") || "0");
      if (isHeadingTarget && position === "after") {
        const draggedSentence = this.currentDocument.sentences[draggedParaIndex][draggedSentIndex];
        let draggedSentenceBlock = [draggedSentence];
        if (this.currentDocument.rawParagraphs) {
          const extractedBlock = this.extractSentenceBlock(this.currentDocument.rawParagraphs[draggedParaIndex], draggedSentIndex);
          if (extractedBlock.length > 0) {
            draggedSentenceBlock = extractedBlock;
          }
          const updatedSourceParagraph = this.removeSentenceBlock(this.currentDocument.rawParagraphs[draggedParaIndex], draggedSentIndex);
          this.currentDocument.rawParagraphs[draggedParaIndex] = updatedSourceParagraph;
        }
        this.currentDocument.sentences[draggedParaIndex].splice(draggedSentIndex, 1);
        const insertParaIndex = dropParaIndex + 1;
        this.currentDocument.sentences.splice(insertParaIndex, 0, [draggedSentence]);
        if (this.currentDocument.rawParagraphs) {
          const newRawParagraph = draggedSentenceBlock.join("\n");
          this.currentDocument.rawParagraphs.splice(insertParaIndex, 0, newRawParagraph);
        }
        this.currentDocument.paragraphs.splice(insertParaIndex, 0, draggedSentence);
        this.syncFromRawParagraphs();
        await this.saveChangesToFile();
        this.renderCurrentZoom();
        return;
      } else if (isHeadingTarget) {
        if (position === "before") {
          dropSentIndex = dropSentIndex;
        }
      }
      if (this.currentDocument.rawParagraphs) {
        if (draggedParaIndex === dropParaIndex) {
          const paragraph = this.currentDocument.rawParagraphs[draggedParaIndex];
          const updatedParagraph = this.moveSentenceBlockWithinParagraph(
            paragraph,
            draggedSentIndex,
            dropSentIndex,
            position
          );
          this.currentDocument.rawParagraphs[draggedParaIndex] = updatedParagraph;
        } else {
          const sourceParagraph = this.currentDocument.rawParagraphs[draggedParaIndex];
          const targetParagraph = this.currentDocument.rawParagraphs[dropParaIndex];
          const extractedBlock = this.extractSentenceBlock(sourceParagraph, draggedSentIndex);
          const updatedSourceParagraph = this.removeSentenceBlock(sourceParagraph, draggedSentIndex);
          const updatedTargetParagraph = this.insertSentenceBlock(targetParagraph, dropSentIndex, extractedBlock, position);
          this.currentDocument.rawParagraphs[draggedParaIndex] = updatedSourceParagraph;
          this.currentDocument.rawParagraphs[dropParaIndex] = updatedTargetParagraph;
        }
        this.syncFromRawParagraphs();
      } else {
        const draggedSentence = this.currentDocument.sentences[draggedParaIndex].splice(draggedSentIndex, 1)[0];
        let insertIndex = dropSentIndex;
        if (draggedParaIndex === dropParaIndex && draggedSentIndex < dropSentIndex) {
          insertIndex = dropSentIndex - 1;
        }
        if (position === "after") {
          insertIndex += 1;
        }
        this.currentDocument.sentences[dropParaIndex].splice(insertIndex, 0, draggedSentence);
        this.updateParagraphsFromSentences();
      }
    }
    await this.saveChangesToFile();
    this.renderCurrentZoom();
  }
  updateParagraphsFromSentences() {
    this.currentDocument.paragraphs = this.currentDocument.sentences.map(
      (sentenceArray) => sentenceArray.join(" ")
    );
  }
  extractSentenceBlock(paragraph, sentenceIndex) {
    const lines = paragraph.split("\n");
    let sentenceLineIndex = -1;
    let nonCommentLineCount = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !(line.startsWith("%%") && line.endsWith("%%"))) {
        if (nonCommentLineCount === sentenceIndex) {
          sentenceLineIndex = i;
          break;
        }
        nonCommentLineCount++;
      }
    }
    if (sentenceLineIndex === -1)
      return [];
    const block = [lines[sentenceLineIndex]];
    for (let i = sentenceLineIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line.startsWith("%%") && line.endsWith("%%")) {
        block.push(lines[i]);
      } else if (line) {
        break;
      } else {
        block.push(lines[i]);
      }
    }
    return block;
  }
  removeSentenceBlock(paragraph, sentenceIndex) {
    const lines = paragraph.split("\n");
    let sentenceLineIndex = -1;
    let nonCommentLineCount = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !(line.startsWith("%%") && line.endsWith("%%"))) {
        if (nonCommentLineCount === sentenceIndex) {
          sentenceLineIndex = i;
          break;
        }
        nonCommentLineCount++;
      }
    }
    if (sentenceLineIndex === -1)
      return paragraph;
    const newLines = [...lines];
    let removeCount = 1;
    for (let i = sentenceLineIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line.startsWith("%%") && line.endsWith("%%")) {
        removeCount++;
      } else if (line) {
        break;
      } else {
        removeCount++;
      }
    }
    newLines.splice(sentenceLineIndex, removeCount);
    return newLines.join("\n");
  }
  insertSentenceBlock(paragraph, targetSentenceIndex, block, position) {
    const lines = paragraph.split("\n");
    let insertLineIndex = 0;
    let nonCommentLineCount = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !(line.startsWith("%%") && line.endsWith("%%"))) {
        if (nonCommentLineCount === targetSentenceIndex) {
          insertLineIndex = i;
          if (position === "after") {
            let j = i + 1;
            while (j < lines.length) {
              const nextLine = lines[j].trim();
              if (nextLine.startsWith("%%") && nextLine.endsWith("%%")) {
                j++;
              } else if (nextLine) {
                break;
              } else {
                j++;
              }
            }
            insertLineIndex = j;
          }
          break;
        }
        nonCommentLineCount++;
      }
    }
    const newLines = [...lines];
    newLines.splice(insertLineIndex, 0, ...block);
    return newLines.join("\n");
  }
  syncFromRawParagraphs() {
    if (!this.currentDocument.rawParagraphs)
      return;
    const sentences = this.currentDocument.rawParagraphs.map((para) => {
      const lines = para.split("\n");
      return lines.filter((line) => {
        const trimmed = line.trim();
        return trimmed && !(trimmed.startsWith("%%") && trimmed.endsWith("%%"));
      });
    });
    const paragraphs = sentences.map((sentenceArray) => sentenceArray.join("\n"));
    this.currentDocument.sentences = sentences;
    this.currentDocument.paragraphs = paragraphs;
  }
  sentenceHasAlternatives(paraIndex, sentIndex) {
    if (!this.currentDocument.rawParagraphs || paraIndex >= this.currentDocument.rawParagraphs.length) {
      return false;
    }
    const paragraph = this.currentDocument.rawParagraphs[paraIndex];
    const lines = paragraph.split("\n");
    let sentenceLineIndex = -1;
    let nonCommentLineCount = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !(line.startsWith("%%") && line.endsWith("%%"))) {
        if (nonCommentLineCount === sentIndex) {
          sentenceLineIndex = i;
          break;
        }
        nonCommentLineCount++;
      }
    }
    if (sentenceLineIndex === -1)
      return false;
    for (let i = sentenceLineIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line.startsWith("%%") && line.endsWith("%%")) {
        const commentContent = line.slice(2, -2).trim();
        if (!commentContent.startsWith("SELECTED:")) {
          return true;
        }
      } else if (line) {
        break;
      }
    }
    return false;
  }
  getSentenceAlternatives(paraIndex, sentIndex) {
    if (!this.currentDocument.rawParagraphs || paraIndex >= this.currentDocument.rawParagraphs.length) {
      return { alternatives: [], selectedIndex: -1, original: "" };
    }
    const paragraph = this.currentDocument.rawParagraphs[paraIndex];
    const lines = paragraph.split("\n");
    let sentenceLineIndex = -1;
    let nonCommentLineCount = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !(line.startsWith("%%") && line.endsWith("%%"))) {
        if (nonCommentLineCount === sentIndex) {
          sentenceLineIndex = i;
          break;
        }
        nonCommentLineCount++;
      }
    }
    if (sentenceLineIndex === -1) {
      return { alternatives: [], selectedIndex: -1, original: "" };
    }
    const alternatives = [];
    let selectedIndex = -1;
    let foundOriginal = "";
    const currentSentence = lines[sentenceLineIndex].trim();
    for (let i = sentenceLineIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line.startsWith("%%") && line.endsWith("%%")) {
        const commentContent = line.slice(2, -2).trim();
        if (commentContent.startsWith("SELECTED:")) {
          selectedIndex = parseInt(commentContent.split(":")[1]);
        } else if (commentContent.startsWith("ORIGINAL:")) {
          foundOriginal = commentContent.slice(9).trim();
        } else {
          alternatives.push(commentContent);
        }
      } else if (line) {
        break;
      }
    }
    const original = foundOriginal || currentSentence;
    return { alternatives, selectedIndex, original };
  }
  paragraphHasComments(paraIndex) {
    if (!this.currentDocument.rawParagraphs || paraIndex >= this.currentDocument.rawParagraphs.length) {
      return false;
    }
    const paragraph = this.currentDocument.rawParagraphs[paraIndex];
    const lines = paragraph.split("\n");
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed.startsWith("%%") && trimmed.endsWith("%%")) {
        const commentContent = trimmed.slice(2, -2).trim();
        if (commentContent !== "PARAGRAPH_COMPLETE") {
          return true;
        }
      }
    }
    return false;
  }
  paragraphIsComplete(paraIndex) {
    if (!this.currentDocument.rawParagraphs || paraIndex >= this.currentDocument.rawParagraphs.length) {
      return false;
    }
    const paragraph = this.currentDocument.rawParagraphs[paraIndex];
    const lines = paragraph.split("\n");
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed.startsWith("%%") && trimmed.endsWith("%%")) {
        const commentContent = trimmed.slice(2, -2).trim();
        if (commentContent === "PARAGRAPH_COMPLETE") {
          return true;
        }
      }
    }
    return false;
  }
  async toggleParagraphCompletion(paraIndex) {
    if (!this.currentDocument.rawParagraphs || paraIndex >= this.currentDocument.rawParagraphs.length) {
      return;
    }
    const hasAlternatives = this.paragraphHasComments(paraIndex);
    const paragraph = this.currentDocument.rawParagraphs[paraIndex];
    const lines = paragraph.split("\n");
    let hasCompletionComment = false;
    let newLines = [];
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed.startsWith("%%") && trimmed.endsWith("%%")) {
        const commentContent = trimmed.slice(2, -2).trim();
        if (commentContent === "PARAGRAPH_COMPLETE") {
          hasCompletionComment = true;
          continue;
        }
      }
      newLines.push(line);
    }
    if (hasAlternatives) {
    } else {
      if (!hasCompletionComment) {
        newLines.unshift("%% PARAGRAPH_COMPLETE %%");
      }
    }
    this.currentDocument.rawParagraphs[paraIndex] = newLines.join("\n");
    this.syncFromRawParagraphs();
    await this.saveChangesToFile();
    this.renderCurrentZoom();
  }
  moveSentenceBlockWithinParagraph(paragraph, fromIndex, toIndex, position) {
    const lines = paragraph.split("\n");
    const extractedBlock = this.extractSentenceBlock(paragraph, fromIndex);
    if (extractedBlock.length === 0)
      return paragraph;
    const withoutSource = this.removeSentenceBlock(paragraph, fromIndex);
    let adjustedToIndex = toIndex;
    if (fromIndex < toIndex) {
      adjustedToIndex = toIndex - 1;
    }
    return this.insertSentenceBlock(withoutSource, adjustedToIndex, extractedBlock, position);
  }
  async saveChangesToFile() {
    const currentFile = this.plugin.app.workspace.getActiveFile();
    if (!currentFile)
      return;
    const newContent = this.reconstructMarkdown();
    this.isInternalUpdate = true;
    await this.plugin.app.vault.modify(currentFile, newContent);
  }
  reconstructMarkdown() {
    if (this.currentDocument.rawParagraphs) {
      return this.ensureProperHeadingSpacing(this.currentDocument.rawParagraphs.join("\n\n"));
    }
    const paragraphsWithLines = this.currentDocument.sentences.map((sentenceArray) => {
      return sentenceArray.join("\n");
    });
    return this.ensureProperHeadingSpacing(paragraphsWithLines.join("\n\n"));
  }
  ensureProperHeadingSpacing(content) {
    return content.replace(/([^\n])\n(#{1,6}\s)/g, "$1\n\n$2").replace(/(#{1,6}\s[^\n]*)\n([^#\n])/g, "$1\n\n$2").replace(/\n{3,}/g, "\n\n");
  }
  openSentenceEditor(paraIndex, sentIndex, sentence) {
    const modal = new SentenceEditModal(this.plugin.app, sentence, paraIndex, sentIndex, this);
    modal.open();
  }
  showSentenceAlternatives(sentBlock, paraIndex, sentIndex) {
    const alternativesData = this.getSentenceAlternatives(paraIndex, sentIndex);
    const { alternatives, selectedIndex, original } = alternativesData;
    const alternativesContainer = sentBlock.createEl("div", { cls: "fornax-alternatives-container" });
    const currentSentence = this.currentDocument.sentences[paraIndex][sentIndex];
    if (original && original !== currentSentence) {
      const originalItem = this.createAlternativeItem(alternativesContainer, original, paraIndex, sentIndex, -1, selectedIndex === -1);
      originalItem.addClass("fornax-original-sentence");
    }
    alternatives.forEach((alternative, altIndex) => {
      this.createAlternativeItem(alternativesContainer, alternative, paraIndex, sentIndex, altIndex, selectedIndex === altIndex);
    });
  }
  createAlternativeItem(container, text, paraIndex, sentIndex, altIndex, isSelected) {
    const item = container.createEl("div", { cls: "fornax-alternative-item" });
    const radio = item.createEl("input", {
      type: "radio",
      cls: "fornax-alternative-radio",
      attr: {
        name: `sentence-${paraIndex}-${sentIndex}`,
        value: altIndex.toString()
      }
    });
    if (isSelected) {
      radio.checked = true;
    }
    radio.onchange = () => this.selectSentenceAlternative(paraIndex, sentIndex, altIndex);
    const textEl = item.createEl("div", {
      cls: "fornax-alternative-text",
      text
    });
    if (altIndex >= 0) {
      const deleteBtn = item.createEl("button", {
        cls: "fornax-delete-alternative-btn",
        text: "\xD7"
      });
      deleteBtn.onclick = () => this.deleteAlternative(paraIndex, sentIndex, altIndex);
    }
    return item;
  }
  showAddAlternativeInput(sentBlock, paraIndex, sentIndex) {
    const existingInput = sentBlock.querySelector(".fornax-add-input");
    if (existingInput)
      return;
    const sentenceRow = sentBlock.querySelector(".fornax-sentence-row");
    const inputContainer = sentBlock.createEl("div", { cls: "fornax-add-input" });
    const textArea = inputContainer.createEl("textarea", {
      cls: "fornax-alternative-input",
      attr: { placeholder: "Enter new alternative..." }
    });
    const buttonContainer = inputContainer.createEl("div", { cls: "fornax-input-buttons" });
    const saveBtn = buttonContainer.createEl("button", {
      cls: "fornax-save-alternative-btn",
      text: "Save"
    });
    const cancelBtn = buttonContainer.createEl("button", {
      cls: "fornax-cancel-alternative-btn",
      text: "Cancel"
    });
    saveBtn.onclick = () => this.saveNewAlternative(paraIndex, sentIndex, textArea.value, sentBlock);
    cancelBtn.onclick = () => inputContainer.remove();
    textArea.focus();
  }
  async commitSentenceChoice(paraIndex, sentIndex) {
    if (!this.currentDocument.rawParagraphs)
      return;
    const paragraph = this.currentDocument.rawParagraphs[paraIndex];
    const lines = paragraph.split("\n");
    let sentenceLineIndex = -1;
    let nonCommentLineCount = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !(line.startsWith("%%") && line.endsWith("%%"))) {
        if (nonCommentLineCount === sentIndex) {
          sentenceLineIndex = i;
          break;
        }
        nonCommentLineCount++;
      }
    }
    if (sentenceLineIndex === -1)
      return;
    const indicesToRemove = [];
    for (let i = sentenceLineIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line.startsWith("%%") && line.endsWith("%%")) {
        const commentContent = line.slice(2, -2).trim();
        if (commentContent.startsWith("ORIGINAL:") || commentContent.startsWith("SELECTED:") || !commentContent.startsWith("PARAGRAPH_COMPLETE") && commentContent !== "PARAGRAPH_COMPLETE") {
          indicesToRemove.push(i);
        }
      } else if (line) {
        break;
      }
    }
    for (let i = indicesToRemove.length - 1; i >= 0; i--) {
      lines.splice(indicesToRemove[i], 1);
    }
    this.currentDocument.rawParagraphs[paraIndex] = lines.join("\n");
    this.syncFromRawParagraphs();
    await this.saveChangesToFile();
    this.renderCurrentZoom();
  }
  async selectSentenceAlternative(paraIndex, sentIndex, altIndex) {
    var _a, _b;
    const alternativesData = this.getSentenceAlternatives(paraIndex, sentIndex);
    const { alternatives, original } = alternativesData;
    if (!this.currentDocument.rawParagraphs)
      return;
    let newSentenceText = "";
    if (altIndex === -1) {
      newSentenceText = original;
    } else if (altIndex < alternatives.length) {
      newSentenceText = alternatives[altIndex];
    }
    if (!newSentenceText)
      return;
    const paragraph = this.currentDocument.rawParagraphs[paraIndex];
    const lines = paragraph.split("\n");
    let sentenceLineIndex = -1;
    let nonCommentLineCount = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !(line.startsWith("%%") && line.endsWith("%%"))) {
        if (nonCommentLineCount === sentIndex) {
          sentenceLineIndex = i;
          break;
        }
        nonCommentLineCount++;
      }
    }
    if (sentenceLineIndex !== -1) {
      const originalLine = lines[sentenceLineIndex];
      const leadingSpaces = ((_a = originalLine.match(/^\s*/)) == null ? void 0 : _a[0]) || "";
      const currentSentenceText = originalLine.trim();
      let originalCommentExists = false;
      let selectedCommentFound = false;
      let selectedCommentIndex = -1;
      for (let i = sentenceLineIndex + 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line.startsWith("%%") && line.endsWith("%%")) {
          const commentContent = line.slice(2, -2).trim();
          if (commentContent.startsWith("ORIGINAL:")) {
            originalCommentExists = true;
          } else if (commentContent.startsWith("SELECTED:")) {
            selectedCommentFound = true;
            selectedCommentIndex = i;
          }
        } else if (line) {
          break;
        }
      }
      if (!originalCommentExists && altIndex !== -1) {
        const commentIndent = leadingSpaces;
        lines.splice(sentenceLineIndex + 1, 0, `${commentIndent}%% ORIGINAL: ${currentSentenceText} %%`);
        if (selectedCommentIndex !== -1) {
          selectedCommentIndex++;
        }
      }
      lines[sentenceLineIndex] = leadingSpaces + newSentenceText;
      if (selectedCommentFound && selectedCommentIndex !== -1) {
        const commentLeadingSpaces = ((_b = lines[selectedCommentIndex].match(/^\s*/)) == null ? void 0 : _b[0]) || "";
        lines[selectedCommentIndex] = `${commentLeadingSpaces}%% SELECTED:${altIndex} %%`;
      } else if (altIndex !== -1) {
        const commentIndent = leadingSpaces;
        const insertIndex = originalCommentExists ? sentenceLineIndex + 2 : sentenceLineIndex + 1;
        lines.splice(insertIndex, 0, `${commentIndent}%% SELECTED:${altIndex} %%`);
      }
      if (altIndex === -1 && selectedCommentFound && selectedCommentIndex !== -1) {
        lines.splice(selectedCommentIndex, 1);
      }
      this.currentDocument.rawParagraphs[paraIndex] = lines.join("\n");
      this.syncFromRawParagraphs();
      await this.saveChangesToFile();
      this.renderCurrentZoom();
    }
  }
  async deleteAlternative(paraIndex, sentIndex, altIndex) {
    if (!this.currentDocument.rawParagraphs || altIndex < 0)
      return;
    const paragraph = this.currentDocument.rawParagraphs[paraIndex];
    const lines = paragraph.split("\n");
    let sentenceLineIndex = -1;
    let nonCommentLineCount = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !(line.startsWith("%%") && line.endsWith("%%"))) {
        if (nonCommentLineCount === sentIndex) {
          sentenceLineIndex = i;
          break;
        }
        nonCommentLineCount++;
      }
    }
    if (sentenceLineIndex === -1)
      return;
    let currentAltIndex = 0;
    for (let i = sentenceLineIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line.startsWith("%%") && line.endsWith("%%")) {
        const commentContent = line.slice(2, -2).trim();
        if (!commentContent.startsWith("SELECTED:") && !commentContent.startsWith("ORIGINAL:")) {
          if (currentAltIndex === altIndex) {
            lines.splice(i, 1);
            break;
          }
          currentAltIndex++;
        }
      } else if (line) {
        break;
      }
    }
    this.currentDocument.rawParagraphs[paraIndex] = lines.join("\n");
    this.syncFromRawParagraphs();
    await this.saveChangesToFile();
    this.renderCurrentZoom();
  }
  async saveNewAlternative(paraIndex, sentIndex, newText, sentBlock) {
    var _a;
    if (!newText.trim() || !this.currentDocument.rawParagraphs)
      return;
    const paragraph = this.currentDocument.rawParagraphs[paraIndex];
    const lines = paragraph.split("\n");
    let sentenceLineIndex = -1;
    let nonCommentLineCount = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !(line.startsWith("%%") && line.endsWith("%%"))) {
        if (nonCommentLineCount === sentIndex) {
          sentenceLineIndex = i;
          break;
        }
        nonCommentLineCount++;
      }
    }
    if (sentenceLineIndex === -1)
      return;
    let insertIndex = sentenceLineIndex + 1;
    for (let i = sentenceLineIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line.startsWith("%%") && line.endsWith("%%")) {
        insertIndex = i + 1;
      } else if (line) {
        break;
      }
    }
    const commentIndent = ((_a = lines[sentenceLineIndex].match(/^\s*/)) == null ? void 0 : _a[0]) || "";
    lines.splice(insertIndex, 0, `${commentIndent}%% ${newText.trim()} %%`);
    this.currentDocument.rawParagraphs[paraIndex] = lines.join("\n");
    this.syncFromRawParagraphs();
    await this.saveChangesToFile();
    const inputContainer = sentBlock.querySelector(".fornax-add-input");
    if (inputContainer) {
      inputContainer.remove();
    }
    this.renderCurrentZoom();
  }
  addStyles() {
    if (!document.getElementById("fornax-styles")) {
      const style = document.createElement("style");
      style.id = "fornax-styles";
      style.textContent = `
				.fornax-telescope {
					height: 100%;
					display: flex;
					flex-direction: column;
					font-family: var(--font-interface);
				}

				.fornax-zoom-controls {
					display: flex;
					gap: 8px;
					padding: 16px;
					background: var(--background-secondary);
					border-bottom: 1px solid var(--background-modifier-border);
				}

				.fornax-zoom-btn {
					padding: 8px 16px;
					border: 1px solid var(--background-modifier-border);
					background: var(--background-primary);
					color: var(--text-normal);
					border-radius: 6px;
					cursor: pointer;
					transition: all 0.2s ease;
				}

				.fornax-zoom-btn:hover {
					background: var(--background-secondary);
				}

				.fornax-zoom-btn.active {
					background: var(--interactive-accent);
					color: var(--text-on-accent);
					border-color: var(--interactive-accent);
				}

				.fornax-content {
					flex: 1;
					overflow-y: auto;
					padding: 16px;
				}

				.fornax-placeholder {
					text-align: center;
					color: var(--text-muted);
					margin-top: 40px;
				}

				.fornax-paragraph-block, .fornax-sentence-block {
					position: relative;
					margin: 12px 0 12px 32px;
					padding: 16px;
					background: var(--background-primary);
					border: 1px solid var(--background-modifier-border);
					border-radius: 8px;
					transition: all 0.2s ease;
				}

				.fornax-paragraph-block:hover, .fornax-sentence-block:hover {
					border-color: var(--interactive-accent);
					box-shadow: 0 2px 8px var(--background-modifier-box-shadow);
				}

				.fornax-drag-handle {
					position: absolute;
					left: -20px;
					top: 50%;
					transform: translateY(-50%);
					color: var(--text-muted);
					cursor: grab;
					font-size: 16px;
					opacity: 0.6;
					padding: 4px;
					z-index: 10;
					font-weight: bold;
					user-select: none;
				}

				.fornax-paragraph-block:hover .fornax-drag-handle,
				.fornax-sentence-block:hover .fornax-drag-handle {
					opacity: 1;
				}

				.fornax-drag-handle:active {
					cursor: grabbing;
				}

				.fornax-paragraph-content, .fornax-sentence-content {
					cursor: pointer;
					line-height: 1.6;
				}

				.fornax-sentence-count {
					position: absolute;
					top: 8px;
					right: 8px;
					font-size: 11px;
					color: var(--text-muted);
					background: var(--background-secondary);
					padding: 2px 6px;
					border-radius: 10px;
				}

				.fornax-edit-sentence-btn {
					position: absolute;
					top: 8px;
					right: 8px;
					background: none;
					border: none;
					cursor: pointer;
					opacity: 0;
					transition: opacity 0.2s ease;
				}

				.fornax-sentence-block:hover .fornax-edit-sentence-btn {
					opacity: 1;
				}

				.fornax-completion-btn {
					position: absolute;
					bottom: 8px;
					right: 8px;
					background: none;
					border: none;
					cursor: pointer;
					font-size: 14px;
					opacity: 0.7;
					transition: opacity 0.2s ease;
					padding: 2px 4px;
				}

				.fornax-paragraph-block:hover .fornax-completion-btn {
					opacity: 1;
				}

				.fornax-paragraph-header {
					font-weight: 600;
					color: var(--text-accent);
					margin: 20px 0 12px 0;
					padding: 8px 0;
					border-bottom: 1px solid var(--background-modifier-border);
				}

				.fornax-overview {
					margin-bottom: 24px;
				}

				.fornax-document-title {
					color: var(--text-accent);
					font-size: 1.5em;
					font-weight: 600;
					margin-bottom: 8px;
					border-bottom: 2px solid var(--text-accent);
					padding-bottom: 8px;
				}

				.fornax-stats {
					display: flex;
					gap: 16px;
					margin: 12px 0;
				}

				.stat {
					padding: 4px 12px;
					background: var(--background-secondary);
					border-radius: 16px;
					font-size: 13px;
					color: var(--text-muted);
				}

				.fornax-mini-paragraphs {
					display: grid;
					gap: 12px;
				}

				.fornax-mini-paragraph {
					padding: 12px;
					background: var(--background-secondary);
					border-radius: 6px;
					cursor: pointer;
					transition: all 0.2s ease;
					font-size: 14px;
					line-height: 1.4;
				}

				.fornax-mini-paragraph:hover {
					background: var(--background-primary);
					border: 1px solid var(--interactive-accent);
				}

				.fornax-sections-container {
					display: grid;
					gap: 16px;
					margin-top: 16px;
				}

				.fornax-section-block {
					background: var(--background-secondary);
					border: 1px solid var(--background-modifier-border);
					border-radius: 8px;
					padding: 16px;
					cursor: pointer;
					transition: all 0.2s ease;
				}

				.fornax-section-block:hover {
					border-color: var(--interactive-accent);
					box-shadow: 0 2px 8px var(--background-modifier-box-shadow);
				}

				.fornax-section-header {
					border-bottom: 1px solid var(--background-modifier-border);
					margin-bottom: 12px;
					padding-bottom: 8px;
				}

				.fornax-section-title {
					margin: 0;
					color: var(--text-accent);
					font-size: 16px;
					font-weight: 600;
				}

				.fornax-section-content {
					display: flex;
					flex-direction: column;
					gap: 6px;
				}

				.fornax-paragraph-preview {
					color: var(--text-muted);
					font-size: 14px;
					line-height: 1.4;
					padding: 4px 0;
					border-left: 2px solid transparent;
					padding-left: 8px;
				}

				.fornax-third-level-heading {
					color: var(--text-normal);
					font-weight: 500;
					font-size: 14px;
					background: var(--background-primary);
					padding: 4px 8px;
					border-radius: 3px;
					border-left: 2px solid var(--text-accent);
					font-style: italic;
					opacity: 0.9;
				}

				.fornax-heading-block {
					position: relative;
					margin: 12px 0;
					padding: 12px 16px;
					background: var(--background-secondary);
					border: 1px solid var(--background-modifier-border);
					border-radius: 6px;
					opacity: 0.6;
					cursor: default;
				}

				.fornax-heading-content {
					color: var(--text-muted);
					font-weight: 600;
					line-height: 1.4;
					pointer-events: none;
					user-select: none;
				}

				.fornax-heading-block.fornax-drop-target {
					border-color: var(--interactive-accent) !important;
					background: rgba(var(--interactive-accent-rgb, 0, 122, 255), 0.1) !important;
					opacity: 1 !important;
				}

				.fornax-placeholder {
					opacity: 0.3 !important;
					background: var(--interactive-accent) !important;
					border: 2px dashed var(--interactive-accent) !important;
				}

				.dragging {
					z-index: 1000;
					box-shadow: 0 4px 16px var(--background-modifier-box-shadow) !important;
					transform: rotate(2deg);
				}

				.fornax-drop-target {
					border-color: var(--interactive-accent) !important;
					background: var(--interactive-accent-hover) !important;
					transform: scale(1.02);
				}

				.fornax-drop-before {
					border-top: 3px solid var(--interactive-accent) !important;
				}

				.fornax-drop-after {
					border-bottom: 3px solid var(--interactive-accent) !important;
				}

				.fornax-has-alternatives {
					background: rgba(255, 235, 59, 0.15) !important;
					border-left: 3px solid #ffc107 !important;
				}

				.fornax-paragraph-block.fornax-has-alternatives {
					background: rgba(255, 235, 59, 0.1) !important;
					border-left: 3px solid #ffc107 !important;
				}

				.fornax-sentence-block.fornax-has-alternatives {
					background: rgba(255, 235, 59, 0.2) !important;
					border-left: 3px solid #ffc107 !important;
				}

				.fornax-paragraph-complete {
					background: rgba(76, 175, 80, 0.1) !important;
					border-left: 3px solid #4caf50 !important;
				}

				.fornax-paragraph-block.fornax-paragraph-complete {
					background: rgba(76, 175, 80, 0.15) !important;
					border-left: 3px solid #4caf50 !important;
				}

				/* Inline sentence alternatives styling */
				.fornax-sentence-row {
					display: flex;
					align-items: center;
					gap: 8px;
					flex-wrap: wrap;
				}

				.fornax-sentence-content {
					flex: 1;
					min-width: 0;
				}

				.fornax-add-alternative-btn, .fornax-save-final-btn {
					background: none;
					border: 1px solid var(--background-modifier-border);
					border-radius: 3px;
					padding: 2px 6px;
					font-size: 11px;
					color: var(--text-muted);
					cursor: pointer;
					opacity: 0.7;
					transition: opacity 0.2s ease;
				}

				.fornax-add-alternative-btn:hover, .fornax-save-final-btn:hover {
					opacity: 1;
					background: var(--background-modifier-hover);
				}

				.fornax-save-final-btn {
					color: var(--color-green);
					border-color: var(--color-green);
				}

				.fornax-save-final-btn:hover {
					background: rgba(76, 175, 80, 0.1);
				}

				.fornax-alternatives-container {
					margin-top: 8px;
					padding: 8px;
					background: var(--background-secondary);
					border-radius: 4px;
					border: 1px solid var(--background-modifier-border);
				}

				.fornax-alternative-item {
					display: flex;
					align-items: flex-start;
					gap: 8px;
					margin-bottom: 6px;
					padding: 4px;
					border-radius: 3px;
				}

				.fornax-alternative-item:last-child {
					margin-bottom: 0;
				}

				.fornax-alternative-item:hover {
					background: var(--background-modifier-hover);
				}

				.fornax-alternative-radio {
					margin-top: 2px;
					cursor: pointer;
				}

				.fornax-alternative-text {
					flex: 1;
					font-size: 13px;
					line-height: 1.4;
					word-wrap: break-word;
				}

				.fornax-original-sentence .fornax-alternative-text {
					font-style: italic;
					color: var(--text-muted);
				}

				.fornax-delete-alternative-btn {
					background: none;
					border: none;
					color: var(--text-error);
					cursor: pointer;
					font-size: 16px;
					line-height: 1;
					padding: 0;
					width: 20px;
					height: 20px;
					display: flex;
					align-items: center;
					justify-content: center;
					border-radius: 2px;
					opacity: 0.6;
					transition: opacity 0.2s ease;
				}

				.fornax-delete-alternative-btn:hover {
					opacity: 1;
					background: var(--background-modifier-error-hover);
				}

				.fornax-add-input {
					margin-top: 8px;
					padding: 8px;
					background: var(--background-secondary);
					border-radius: 4px;
					border: 1px solid var(--background-modifier-border);
				}

				.fornax-alternative-input {
					width: 100%;
					min-height: 60px;
					resize: vertical;
					padding: 8px;
					border: 1px solid var(--background-modifier-border);
					border-radius: 3px;
					background: var(--background-primary);
					color: var(--text-normal);
					font-family: inherit;
					font-size: 13px;
					line-height: 1.4;
				}

				.fornax-alternative-input:focus {
					outline: none;
					border-color: var(--interactive-accent);
				}

				.fornax-input-buttons {
					display: flex;
					gap: 8px;
					margin-top: 8px;
					justify-content: flex-end;
				}

				.fornax-save-alternative-btn, .fornax-cancel-alternative-btn {
					padding: 4px 12px;
					border: 1px solid var(--background-modifier-border);
					border-radius: 3px;
					background: var(--background-primary);
					color: var(--text-normal);
					cursor: pointer;
					font-size: 12px;
				}

				.fornax-save-alternative-btn {
					background: var(--interactive-accent);
					color: var(--text-on-accent);
					border-color: var(--interactive-accent);
				}

				.fornax-save-alternative-btn:hover {
					background: var(--interactive-accent-hover);
				}

				.fornax-cancel-alternative-btn:hover {
					background: var(--background-modifier-hover);
				}
			`;
      document.head.appendChild(style);
    }
  }
  destroy() {
    const style = document.getElementById("fornax-styles");
    if (style)
      style.remove();
  }
};
var SentenceEditModal = class extends import_obsidian2.Modal {
  constructor(app, sentence, paraIndex, sentIndex, overlay) {
    super(app);
  }
};

// src/ui/fornax-view.ts
var FornaxView = class extends import_obsidian3.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.overlay = null;
    this.currentFile = null;
  }
  getViewType() {
    return VIEW_TYPE_FORNAX;
  }
  getDisplayText() {
    return "Fornax Telescope";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const telescopeContainer = container.createEl("div", {
      cls: "fornax-telescope-container"
    });
    this.overlay = new TelescopeOverlay(telescopeContainer, this.plugin);
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.updateActiveFile();
      })
    );
    await this.updateActiveFile();
  }
  async updateActiveFile() {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile && activeFile.extension === "md") {
      this.currentFile = activeFile;
      if (this.overlay) {
        await this.overlay.loadDocument(activeFile);
      }
    }
  }
  async onClose() {
    var _a;
    (_a = this.overlay) == null ? void 0 : _a.destroy();
  }
};

// src/settings/settings.ts
var import_obsidian4 = require("obsidian");
var FornaxSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Fornax Settings" });
    await this.loadReadme(containerEl);
  }
  async loadReadme(containerEl) {
    try {
      const readmeFile = this.app.vault.getAbstractFileByPath("README.md");
      if (readmeFile && readmeFile instanceof this.app.vault.adapter.constructor) {
        const readmeContent = await this.app.vault.read(readmeFile);
        this.renderMarkdown(containerEl, readmeContent);
      } else {
        this.showFallbackDocumentation(containerEl);
      }
    } catch (error) {
      console.log("Could not load README.md, showing fallback documentation");
      this.showFallbackDocumentation(containerEl);
    }
  }
  renderMarkdown(containerEl, markdown) {
    const readmeContainer = containerEl.createEl("div", {
      cls: "fornax-readme-container"
    });
    this.app.vault.adapter.read("README.md").then((content) => {
      const htmlContent = this.convertMarkdownToHtml(content);
      readmeContainer.innerHTML = htmlContent;
    }).catch(() => {
      this.showFallbackDocumentation(containerEl);
    });
  }
  convertMarkdownToHtml(markdown) {
    return markdown.replace(/^# (.*$)/gm, "<h1>$1</h1>").replace(/^## (.*$)/gm, "<h2>$1</h2>").replace(/^### (.*$)/gm, "<h3>$1</h3>").replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>").replace(/\*(.*?)\*/g, "<em>$1</em>").replace(/`(.*?)`/g, "<code>$1</code>").replace(/^\- (.*$)/gm, "<li>$1</li>").replace(/(<li>.*<\/li>)/gs, "<ul>$1</ul>").replace(/\n\n/g, "</p><p>").replace(/^(?!<[h|u|l])/gm, "<p>").replace(/(?!>[h|u|l])$/gm, "</p>");
  }
  showFallbackDocumentation(containerEl) {
    const docContainer = containerEl.createEl("div", {
      cls: "fornax-documentation"
    });
    docContainer.innerHTML = `
			<h3>Fornax - Telescopic Writing Plugin</h3>
			<p>Fornax provides "telescopic writing" functionality for Obsidian, allowing you to zoom between document structure, paragraphs, and sentences with drag-and-drop editing and sentence alternatives.</p>

			<h4>Features:</h4>
			<ul>
				<li><strong>Three Zoom Levels:</strong> Document view, Paragraph view, and Sentence view</li>
				<li><strong>Drag & Drop:</strong> Reorder paragraphs and sentences with visual feedback</li>
				<li><strong>Sentence Alternatives:</strong> Create and compare different versions of sentences</li>
				<li><strong>Line-based Writing:</strong> Each line is treated as a sentence unit</li>
				<li><strong>Comment Storage:</strong> Alternatives stored as invisible Obsidian comments</li>
			</ul>

			<h4>How to Use:</h4>
			<ol>
				<li>Open the Fornax panel from the right sidebar</li>
				<li>Switch between Document, Paragraph, and Sentence views</li>
				<li>Drag the <code>::</code> handles to reorder content</li>
				<li>Click the <code>\u270F\uFE0F</code> icon to edit sentence alternatives</li>
				<li>Use "Save Selection" to try alternatives, "Commit" to finalize</li>
			</ol>

			<p><em>For complete documentation, see the README.md file in the plugin directory.</em></p>
		`;
    docContainer.style.maxHeight = "400px";
    docContainer.style.overflowY = "auto";
    docContainer.style.padding = "20px";
    docContainer.style.lineHeight = "1.6";
  }
};

// src/main.ts
var FornaxPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.engine = new FornaxEngine(this.app, this.settings);
    this.registerView(
      VIEW_TYPE_FORNAX,
      (leaf) => new FornaxView(leaf, this)
    );
    this.addRibbonIcon("telescope", "Open Fornax", () => {
      this.activateFornaxView();
    });
    this.addCommand({
      id: "toggle-fornax-mode",
      name: "Toggle Telescopic Writing Mode",
      callback: () => {
        this.toggleFornaxMode();
      }
    });
    this.addSettingTab(new FornaxSettingTab(this.app, this));
  }
  async activateFornaxView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_FORNAX);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: VIEW_TYPE_FORNAX, active: true });
    }
    workspace.revealLeaf(leaf);
  }
  async toggleFornaxMode() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    await this.engine.toggleTelescopeMode(activeFile);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
